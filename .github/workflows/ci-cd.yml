name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  # Run critical tests that catch MCP protocol issues
  critical-tests:
    name: Critical MCP Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Test CLI entry point (catches coroutine issues)
      run: |
        python -m ascom_mcp --version
        python -m ascom_mcp --help
    
    - name: Test server startup with MCP protocol
      run: |
        python -m pytest tests/integration/test_mcp_server_startup.py -v
    
    - name: Test Claude Desktop integration
      run: |
        python -m pytest tests/integration/test_claude_desktop_integration.py -v
    
    - name: Install MCP Inspector
      run: |
        npm install -g @modelcontextprotocol/inspector
    
    - name: Test with MCP Inspector
      run: |
        timeout 10 mcp-inspector python -- -m ascom_mcp || true
        # The timeout is expected, we just want to ensure it starts

  # Standard test matrix
  test:
    needs: critical-tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run tests
      run: |
        pytest -v --cov=ascom_mcp --cov-report=xml
    
    - name: Upload coverage
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  # Build and validate packages
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build packages
      run: python -m build
    
    - name: Check package with twine
      run: twine check dist/*
    
    - name: Test package installation
      run: |
        pip install dist/*.whl
        mcp-server-ascom --version
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # Publish to Test PyPI first (for tags)
  test-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    environment: test-pypi
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install twine
      run: pip install twine
    
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        twine upload --repository-url https://test.pypi.org/legacy/ dist/*
    
    - name: Test installation from Test PyPI
      run: |
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ mcp-server-ascom
        mcp-server-ascom --version

  # Release to PyPI (after test succeeds)
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test-release
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      contents: write
      id-token: write  # For trusted publishing when available
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_TOKEN }}
    
    - name: Verify PyPI Installation
      run: |
        sleep 30  # Give PyPI time to update
        pip install --no-cache-dir mcp-server-ascom==${{ github.ref_name }}
        mcp-server-ascom --version
    
    - name: Test with Claude Desktop config
      run: |
        # Create a test config
        cat > test_config.json << EOF
        {
          "mcpServers": {
            "ascom": {
              "command": "uvx",
              "args": ["mcp-server-ascom"]
            }
          }
        }
        EOF
        
        # Test uvx installation
        pip install uv
        uvx mcp-server-ascom --version